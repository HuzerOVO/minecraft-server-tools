#!/usr/bin/bash

if [[ -h "$0" ]]; then
    cd "$(dirname "$(realpath "$0")")" || exit 2
else
    cd "$(dirname "$0")" || exit 2
fi

source "common.sh"

function cli_usage() {
    cat<<__EOF__
Usage: ${0##*/} [COMMAND]

Command:
    init <instance> <game>      Initialize a <instance> for game <game>.
    generate-scripts <instance> Generate scripts for <instance>

    start <instance> [sub]      Start the specified server or all sub servers for <instance>.
    stop <instance> [sub]       Stop the specified server or all sub servers for <instance>.
    status [instance]           Show a server status, or all instances.

    update <instance>           Update server to new version.
    reload <instance>           Reload a running server.
    script <instance> <script>  Run a custom script.

    list-instances              List all available server instances.
    list-sub <instance>         List all sub server for a instance.
    list-sessions               List all available screen sessions.
    list-supported-games        List all supported games.

    cmd <session> <cmd>         Send a command string <cmd> to <session>.

    help                        Show this help.
__EOF__
if [[ "$CONF_NO_NOTE" != "yes" ]]; then
printf "\033[33m
NOTE:
<scritp> is your custom script(operation) name.
<instance> is a instance name.
<session> is a screen session name.
<cmd> is a server commnad.
<game> is a game name.

The <session> and the <instance> should be the same if it is a single server
instance. If you start a sub server instance, the <session> format is as
<instance>-<sub>. Such as, instance 'dst_server' has a sub server named 'master',
the session name will be 'dst_server-master'.

You can use 'CONF_NO_NOTE=\"yes\"' in your '.mcstrc' to hide this note.

For more help, you can see the README.md or visit the github repository
https://github.com/Huzerovo/minecraft-server-tools

\033[0m"
fi
}

# The user who runs screen
if [[ "$(whoami)" != "$CONF_USER" ]]; then
    error_echo "Please run as user '$CONF_USER'"
    exit 2
fi

if [[ $# -lt 1 ]]; then
    cli_usage
    error_echo "Need a command.";
    exit 2
fi

case $1 in
    init)
        shift
        if [[ -z "$1" ]]; then
            error_echo "Need a instance name."
            exit 2
        fi

        if [[ -z "$2" ]]; then
            error_echo "Need a game name."
            exit 2 
        fi

        # instance exist and initialized
        if has_instance "$1" && [[ -d "$CONF_SERVER_DIR/$1/$CONF_MCST_BASE" ]]; then
            error_echo "Instance $1 is already initialized."
            exit 1
        fi

        # no a supported game
        if ! is_supported_game "$2"; then
            if [[ "$3" == "--force" ]]; then
                warn_echo "Force initialize an unsupported game server instance."
            else
                warn_echo "No a supported game: $2"
                warn_echo "If you realy want to initialize it, use 'mcscli init $1 $2 --force'"
                exit 0
            fi
        fi

        init "$1" "$2"
        ;;
    generate-scripts)
        shift
        if [[ -z "$1" ]]; then
            error_echo "Need a instance name."
            exit 2
        fi

        if ! has_instance "$1"; then
            error_echo "No this instance: $1."
            exit 1
        fi

        generate_scripts "$1"
        ;;
    start)
        shift
        if [[ -z "$1" ]]; then
            error_echo "Need a instance to start."
            exit 2
        fi

        if has_instance "$1"; then
            # start a specified sub server
            if [[ -n "$2" ]]; then
                if ! has_sub_server "$1" "$2";then
                    error_echo "No sub server $2 in instance $1."
                    exit 1
                fi
                start "$1" "$2" || exit 1
                exit 0
            fi

            # no sub server gived, try to start a single server,
            # or start all sub server for instance
            if ! is_sub_server_instance "$1"; then
                start "$1" || exit 1
            else
                for sub in $(list_sub_server "$1"); do
                    start "$1" "$2" || warn_echo "Failed to start sub server $sub for instance $1."
                done
            fi
        else
            error_echo "No this instance: $1."
            exit 1
        fi
        ;;
    stop)
        shift
        if [[ -z "$1" ]]; then
            error_echo "Need a session to stop."
            exit 2
        fi

        _cli_session="$1"

        if [[ -n "$2" ]]; then
            if ! has_sub_server "$1" "$2";then
                error_echo "No sub server $2 in instance $1."
                exit 1
            fi
            _cli_session="$1-$2"
        fi

        if has_session "$_cli_session"; then
            stop "$1" "$2" || exit 1
        else
            error_echo "No this session: $_cli_session."
            exit 1
        fi
        ;;
    update)
        shift
        if [[ -z "$1" ]]; then
            error_echo "Need a instance name."
            exit 2
        fi
        if ! has_instance "$1"; then
            error_echo "No this instance: $1."
            exit 1 
        fi

        update "$1"
        ;;
    reload)
        shift
        if [[ -z "$1" ]]; then
            error_echo "Need a instance name."
            exit 2
        fi
        if ! has_instance "$1"; then
            error_echo "No this instance: $1."
            exit 1 
        fi

        reload "$1"
        ;;
    status)
        shift
        if [[ -z "$1" ]]; then
            # Show all instances
            instances=$(list_instances)
            if [[ -z "$instances" ]]; then
                error_echo "No instance to show status."
                exit 1
            fi

            for instance in $instances; do
                if ! is_sub_server_instance "$instance"; then
                    status "$instance"
                else
                    success_echo "Instance '$instance'"
                    for sub in $(list_sub_server "$instance"); do
                        printf "  - %s\n" "$(status "$instance" "$sub")"
                    done
                fi
            done
        else
            # Show the specified instance.
            if has_instance "$1"; then
                if ! is_sub_server_instance "$1"; then
                    status "$1"
                else
                    success_echo "Instance '$1'"
                    for sub in $(list_sub_server "$1"); do
                        printf "  - %s\n" "$(status "$1" "$sub")"
                    done
                fi
            else
                error_echo "No this instance: $1."
                exit 1
            fi
        fi
        ;;
    script)
        shift
        if [[ -z "$1" ]]; then
            error_echo "Need a instance name."
            exit 2
        fi
        if ! has_instance "$1"; then
            error_echo "No this instance: $1."
            exit 1 
        fi

        if [[ -z "$2" ]]; then
            error_echo "Need a script(operation) name."
            exit 2 
        fi

        custom_script "$1" "$2"
        ;;
    list-instances)
        instances=$(list_instances)
        if [[ -z "$instances" ]]; then
            error_echo "No instance to list."
            exit 1
        fi
        for instance in $instances; do
            if [[ -d "$CONF_SERVER_DIR/$instance/$CONF_MCST_BASE" ]]; then
                printf "%s \033[32m(initialized)\033[0m\n" "$instance"
            else
                printf "%s \033[31m(not initialized)\033[0m\n" "$instance"
            fi
        done
        ;;
    list-sessions)
        sessions=$(list_sessions)
        if [[ -z "$sessions" ]]; then
            error_echo "No session to list."
            exit 1
        else
            success_echo "$sessions"
        fi
        ;;
    list-sub)
        shift
        if [[ -z "$1" ]]; then
            error_echo "Need a instance name."
            exit 2
        fi

        if has_instance "$1"; then
            for sub in $(list_sub_server "$1"); do
                success_echo "$sub"
            done    
        else
            error_echo "No this instance: $1"
            exit 1
        fi
        ;;
    list-supported-games)
        for games in $(list_supported_games); do
            success_echo "$games"
        done
        ;;
    cmd)
        shift
        # $1 is session name now
        if [[ -z "$1" ]]; then
            error_echo "Need a session name to send command."
            exit 2
        fi

        if has_session "$1"; then
            session="$1"
            shift # $* is the server command string now
            cmd "$session" "$*" || exit 1
        else
            error_echo "No this session: $1"
            exit 1
        fi
        ;;
    help | --help | -h)
        cli_usage
        ;;
    *)
        cli_usage
        error_echo "Unknow command: $1"
        exit 2
        ;;
esac

exit 0
